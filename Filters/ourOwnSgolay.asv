function [smoothed] = ourOwnSgolay(values, polynomialOrder, kernelSize)

smoothed = zeros(size(values));

for j = 1:(size(values)) % duplicates values to smoothed (needed for edge values where averaging cannot be done since window would exceed boundaries)

    smoothed[j] = values[j];
end
for k = (floor(kernelSize / 2)):(size(values) - floor(kernelSize / 2)) % runs through all values far away enough from edges where the window doesn't exceed boundaries
sum = 0; % reinitialize
     for(int m = k - kernelSize / 2; m <= k + kernelSize / 2; m++) % runs through all values of the window (should have kernelSize number of iterations)
        {
            sum += values[m];
        }
        smoothed[k] = sum / kernelSize; % average of surrounding window is the new value at that point
     end
end